'''class SegmentTree {
    int[] tree;
    int n;

    // Constructor
    public SegmentTree(int[] arr) {
        n = arr.length;
        tree = new int[4 * n];
        build(arr, 0, 0, n - 1);
    }

    // Build the segment tree
    private void build(int[] arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];  // Leaf node stores the element
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node + 1, start, mid);
            build(arr, 2 * node + 2, mid + 1, end);
            tree[node] = Math.min(tree[2 * node + 1], tree[2 * node + 2]);  // Store min of children
        }
    }

    // Update value at index
    public void update(int index, int value) {
        update(0, 0, n - 1, index, value);
    }

    private void update(int node, int start, int end, int index, int value) {
        if (start == end) {
            tree[node] = value;  // Update leaf
        } else {
            int mid = (start + end) / 2;
            if (index <= mid) update(2 * node + 1, start, mid, index, value);
            else update(2 * node + 2, mid + 1, end, index, value);
            // Update parent node with new min
            tree[node] = Math.min(tree[2 * node + 1], tree[2 * node + 2]);
        }
    }

    // Query minimum in range [l, r]
    public int query(int left, int right) {
        return query(0, 0, n - 1, left, right);
    }

    private int query(int node, int start, int end, int left, int right) {
        // No overlap
        if (right < start || end < left) return Integer.MAX_VALUE;

        // Total overlap
        if (left <= start && end <= right) return tree[node];

        // Partial overlap
        int mid = (start + end) / 2;
        int leftMin = query(2 * node + 1, start, mid, left, right);
        int rightMin = query(2 * node + 2, mid + 1, end, left, right);
        return Math.min(leftMin, rightMin);
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        int[] arr = {4, 2, 7, 1, 3, 6};
        SegmentTree st = new SegmentTree(arr);

        System.out.println("Min in range [1, 4]: " + st.query(1, 4)); // Expected 1
        st.update(3, 8); // Update index 3 (1 â†’ 8)
        System.out.println("Min in range [1, 4] after update: " + st.query(1, 4)); // Expected 2
    }
}'''
